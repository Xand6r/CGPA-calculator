{"version":3,"sources":["components/register/assets/circlePlus.svg","utilities/navbar/component/index.js","utilities/navbar/component/navbar.js","components/register/subcomponents/expertise/expertise.js","components/register/subcomponents/expertise/utils.js","components/register/component/index.js","components/register/component/register.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","to","Expertise","blankState","name","score","unit","useState","state","stateChanger","handleFormChange","e","updatedState","target","dataset","idx","value","console","log","map","val","nameId","scoreId","unitId","key","htmlFor","type","maxLength","placeholder","onChange","data-idx","max","id","onClick","src","blueCircle","alt","points","reduce","previous","current","units","alert","Register","App","exact","path","component","SignUpPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9773127f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/circlePlus.0e3bacf6.svg\";","import NavBar from \"./navbar\";\n\nexport default NavBar;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './navbar.scss';\n\nexport default function navbar() {\n    return (\n        <div>\n            <div className=\"navigation\">\n\n                <Link className='link' to=\"/\">\n                    <div className=\"navigation__logo\">\n                            GRA<b>DER</b>\n                    </div>\n                </Link>\n\n            </div>\n        </div>\n    )\n}\n ","import React, {useState} from 'react';\nimport {scoreClassifier} from './utils';\n\n\nimport './expertise.scss';\n\nimport blueCircle from '../../assets/circlePlus.svg';\nexport default function Expertise() {\n     \n    const blankState = { name:'', score: 0, unit: 0 }\n    const [state, stateChanger] = useState([\n        {...blankState}\n      ]);\n\n    const handleFormChange = (e)=>{\n        const updatedState = [...state];\n        updatedState[e.target.dataset.idx][e.target.name] = e.target.value;\n        stateChanger(updatedState);\n        console.log(state)\n    }\n\n    const calculateGPA = () => {\n        const points = state.reduce((previous, current)=>{\n            previous+=scoreClassifier(current['score']) * current['unit']\n            return previous\n        }, 0)\n\n        const units = state.reduce((previous, current)=>{\n            previous+=current['unit']\n            return previous\n        }, 0)\n\n        if (!(points && units)){\n            alert(`your current GPA is ${0}`);\n            stateChanger([{...blankState}])\n            return;\n        }\n        const gpa = points/units;\n        alert(`your current GPA is ${gpa}`);\n    }\n\n\n    return (\n        <div className=\"expertise\">\n\n            <div className=\"personaldetails__heading\">\n                <div className=\"personaldetails__heading__header\">\n                    GPA Calculator\n                </div>\n            </div>\n\n            <div className=\"expertise__formsection\">\n\n                <div className=\"expertise__formsection__section\">\n                    <div className=\"expertise__formsection__section__header\">\n                        <div className=\"--heading\">Calculate your current GPA</div>\n                        <div className=\"--sub_heading\">\n                            Input the name of the course, unit and your score\n                        </div>\n                    </div>\n                    \n                    {\n                        state.map((val, idx) => {\n                            const nameId = `name-${idx}`;\n                            const scoreId = `score-${idx}`;\n                            const unitId = `unit-${idx}`;\n\n                            return (\n                                <div key={nameId} className=\"expertise__formsection__section__form\">\n                                    <div className=\"--input_wrapper\">\n                                        <label htmlFor=\"position\">#{idx+1} Course Name </label>\n                                        <input\n                                            name=\"name\"\n                                            type=\"text\"\n                                            maxLength=\"30\"\n                                            placeholder=\"Eg. Computer science\"\n                                            onChange={handleFormChange}\n                                            value={val.name}\n                                            data-idx={idx}\n                                        />\n                                    </div>\n\n\n                                    <div className=\"--input_wrapper\">\n                                        <label htmlFor=\"dates\">Score</label>\n                                        <div className=\"--date_wrapper\">\n                                            <input\n                                                type=\"number\"\n                                                name=\"score\"\n                                                max=\"100\"\n                                                placeholder=\"score\"\n                                                id={scoreId}\n                                                onChange={handleFormChange}\n                                                value={val.score}\n                                                data-idx={idx}\n                                            />\n                                            <span>Unit:</span>\n                                            <input\n                                                type=\"number\"\n                                                max=\"10\"\n                                                name=\"unit\"\n                                                placeholder=\"unit\"\n                                                id={unitId}\n                                                onChange={handleFormChange}\n                                                data-idx={idx}\n                                                value={val.unit}\n                                            />\n                                        </div>\n                                    </div>\n                                </div>\n                            )\n                        })\n                    }\n                    \n                    <div \n                        className=\"expertise__formsection__section__footer\"\n                        onClick = {() => {\n                            stateChanger([\n                                ...state,\n                                {...blankState}\n                            ])\n                        }}\n                    >\n                        <img \n                            src={blueCircle}\n                            alt=\"\"\n                        />\n                        <span>\n                            Add New Course\n                        </span>\n                    </div>\n                </div>\n\n\n                    \n\n\n            </div>\n\n            <div className=\"expertise__footer\">\n\n                <div className=\"--button_group\">\n\n                    <div\n                        className=\"next\"\n                        onClick={calculateGPA}\n                    >\n                        Calculate\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    )\n}\n","export const scoreClassifier = (score) =>{\n    if(score>=75 && score<=100){\n        return 4.0\n    }\n    else if(score>=70 && score<=74){\n        return 3.5\n    }\n    else if(score>=65 && score<=69){\n        return 3.25\n    }\n    else if(score>=60 && score<=64){\n        return 3.0\n    }\n    else if(score>=55 && score<=59){\n        return 2.75\n    }\n    else if(score>=50 && score<=54){\n        return 2.5\n    }\n    else if(score>=45 && score<=49){\n        return 2.25\n    }\n    else if(score>=40 && score<=44){\n        return 2.00\n    }\n    else {\n        return 0.00\n    }\n}","import Register from './register';\n\nexport default Register;","import React from 'react';\nimport {component as NavBar} from '../../../utilities/navbar';\nimport {component as Expertise} from '../subcomponents/expertise';\nimport './register.scss';\n\n\n\n\nexport default function Register() {\n\n    return (\n        <div className=\"register\">\n            {/* the navigation bar component */}\n            <NavBar />\n            {/* the navigation bar component */}\n\n            {/* the section actually showing the mail content */}\n            <div className=\"register__content\">\n\n                <div className=\"register__content__form\">\n                    <Expertise/>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { component as SignUpPage } from './components/register';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path='/' component={SignUpPage} />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}